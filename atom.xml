<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://junhaoyigu.github.io</id>
    <title>君豪的博客</title>
    <updated>2021-03-26T03:41:09.423Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://junhaoyigu.github.io"/>
    <link rel="self" href="https://junhaoyigu.github.io/atom.xml"/>
    <logo>https://junhaoyigu.github.io/images/avatar.png</logo>
    <icon>https://junhaoyigu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 君豪的博客</rights>
    <entry>
        <title type="html"><![CDATA[Windows10系统下JDK1.8安装及环境配置]]></title>
        <id>https://junhaoyigu.github.io/post/windows10-jdk8/</id>
        <link href="https://junhaoyigu.github.io/post/windows10-jdk8/">
        </link>
        <updated>2021-03-26T02:11:07.000Z</updated>
        <summary type="html"><![CDATA[<p>jdk1.8在windows下安装教程</p>
]]></summary>
        <content type="html"><![CDATA[<p>jdk1.8在windows下安装教程</p>
<!-- more -->
<h2 id="下载">下载</h2>
<p>        点击 <strong><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">jdk下载</a></strong>  ，进入JDK1.8下载官网，或者直接百度JDK1.8，也可进入下载官网。<br>
进入官网后，按照所给信息下载对应系统版本的JDK,点击下载后需要先登录下Oracle才能下载，没有账户的需要注册。这里以安装jdk-8u281-windows-x64.exe为例。<br>
<img src="https://junhaoyigu.github.io/post-images/1616725147722.png" alt="" loading="lazy"></p>
<h2 id="安装">安装</h2>
<p>下载后双击即可安装，如下图：<br>
<img src="https://junhaoyigu.github.io/post-images/1616725491526.png" alt="" loading="lazy"><br>
更改jdk安装路径（也可以采用默认安装在C盘），这里我安装的是D:\Program Files\Java\jdk1.8.0_281\目录（后面配置环境变量有用），然后下一步。<br>
<img src="https://junhaoyigu.github.io/post-images/1616725795369.png" alt="" loading="lazy"><br>
更改jre安装路径（也可以采用默认安装位置），下一步。<br>
<img src="https://junhaoyigu.github.io/post-images/1616726173353.png" alt="" loading="lazy"><br>
<img src="https://junhaoyigu.github.io/post-images/1616726198570.png" alt="" loading="lazy"></p>
<h2 id="环境配置">环境配置</h2>
<h3 id="jdk环境变量配置">JDK环境变量配置。</h3>
<p>        右键单击此电脑图标，接着点击菜单最下方的属性菜单项，或者连续打开控制面板--系统和安全--系统也可以。<br>
<img src="https://junhaoyigu.github.io/post-images/1616726617329.png" alt="" loading="lazy"><br>
在弹出的对话框中单击”高级“选项卡，接着点击下方的环境变量：<br>
<img src="https://junhaoyigu.github.io/post-images/1616726633980.png" alt="" loading="lazy"></p>
<h3 id="首先配置java_home">首先配置JAVA_HOME。</h3>
<p>        为了后续可能会加入不同的JDK版本，能够做到简单，我们通过配置JAVA_HOME,来获取bin目录之前的目录结构。<br>
        在环境变量对话框中的系统变量中点击“新建”按钮，在弹出的新建系统变量里的变量名中输入JAVA_HOME，在变量值中输入JDK的根目录： D:\Program Files\Java\jdk1.8.0_281\ ，然后点击确定，返回环境变量对话框。<br>
<img src="https://junhaoyigu.github.io/post-images/1616726802759.png" alt="" loading="lazy"></p>
<h3 id="classpath变量">ClassPath变量</h3>
<p>        classpath是存放字节码文件的路径，可以是任意的路径，当执行java命令时，系统会在classpath的路径下自动寻找相应的.class字节码文件。</p>
<p>        Jdk1.5版本以后无需配置classpath</p>
<h3 id="最后配置path变量">最后配置Path变量</h3>
<p>        找到Path变量，双击编辑 Path变量。点击新建，变量值为%JAVA_HOME%\bin ，并将它移到最前端，然后点击确定。<br>
<img src="https://junhaoyigu.github.io/post-images/1616727646033.png" alt="" loading="lazy"></p>
<h2 id="检验是否配置成功">检验是否配置成功</h2>
<h3 id="按键盘winr打开运行输入cmd-指令点击确定进入命令行窗口">按键盘win+R，打开运行，输入cmd 指令，点击确定进入命令行窗口。</h3>
<figure data-type="image" tabindex="1"><img src="https://junhaoyigu.github.io/post-images/1616727796710.png" alt="" loading="lazy"></figure>
<h3 id="输入java-version获取当前安装的-jdk-的版本信息注意java后面有个空格出现下图所示输出则说明jdk安装成功">输入java -version获取当前安装的 jdk 的版本信息（注意：java后面有个空格），出现下图所示输出，则说明jdk安装成功。</h3>
<figure data-type="image" tabindex="2"><img src="https://junhaoyigu.github.io/post-images/1616727904941.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL连接不上错误: "Host 'XXX.XXX.XXX.XXX' is not allowed to connect to this MySQL/Mariadb server]]></title>
        <id>https://junhaoyigu.github.io/post/mysql-lian-jie-bu-shang-cuo-wu-host-xxxxxxxxxxxx-is-not-allowed-to-connect-to-this-mysqlmariadb-server/</id>
        <link href="https://junhaoyigu.github.io/post/mysql-lian-jie-bu-shang-cuo-wu-host-xxxxxxxxxxxx-is-not-allowed-to-connect-to-this-mysqlmariadb-server/">
        </link>
        <updated>2020-09-22T08:24:01.000Z</updated>
        <summary type="html"><![CDATA[<p>工作中遇到的数据库连接问题😤</p>
]]></summary>
        <content type="html"><![CDATA[<p>工作中遇到的数据库连接问题😤</p>
<!-- more -->
<p>##解决方案：<br>
###1.命令行登录数据库<br>
mysql -u 用户名 -p 用户密码<br>
###2.使用自带的mysql数据库<br>
use mysql;<br>
###3.查询是不是root账户只能本地连接<br>
select host,user from user where user='root';<br>
如果root对应的host没有对应的ip，就修改指定ip或者%<br>
###4.修改权限<br>
update user set host = '%'  where user ='root';<br>
<code>如果遇到“ERROR 1062 (23000): Duplicate entry '%-root' for key 'PRIMARY'”错误，不用管它，继续第5步就可以远程访问数据库了</code><br>
###5.刷新数据库<br>
flush privileges;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows系统搭建node环境]]></title>
        <id>https://junhaoyigu.github.io/post/windows-node/</id>
        <link href="https://junhaoyigu.github.io/post/windows-node/">
        </link>
        <updated>2020-09-09T01:56:46.000Z</updated>
        <summary type="html"><![CDATA[<p>虽然是后端程序员，但是有的时候也要接触前端的东西，这是我整理的windows系统如何快速搭建node环境的文章😉</p>
]]></summary>
        <content type="html"><![CDATA[<p>虽然是后端程序员，但是有的时候也要接触前端的东西，这是我整理的windows系统如何快速搭建node环境的文章😉</p>
<!-- more -->
<h2 id="一-node是什么">一、node是什么？</h2>
<p>    Node全称NodeJS，是一个基于 Chrome V8 引擎的 JavaScript 运行环境；一个让JavaScript 运行在服务端的开发平台，它让JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。</p>
<h2 id="二-下载nodejs">二、下载nodejs</h2>
<p>    去官网下载最新版本的安装包 .msi    <strong><a href="http://nodejs.cn/download/">nodejs下载</a></strong></p>
<h3 id="1安装说明">1.安装说明</h3>
<p>建议不要安装到c盘，一直点next下一步就ok啦，什么也不用管。</p>
<h3 id="2测试是否安装成功">2.测试是否安装成功</h3>
<p>    在键盘按下【win+R】键，输入cmd打开命令指示符界面, 然后输入 <strong>node -v</strong> 和 <strong>npm -v</strong> 来查看node版本和npm的版本，npm是node的包管理工具，用他来下载东西很方便</p>
<h2 id="三-配置nodejs">三、配置nodejs</h2>
<h3 id="1配置全局安装路径和日志路径">1.配置全局安装路径和日志路径</h3>
<p>（1）打开你的安装路径，新建两个文件夹，<strong>node_global</strong> 和 <strong>node_cache</strong></p>
<p>（2）再次打开命令指示符窗口cmd 输入</p>
<pre><code>npm config set prefix &quot;D:\Program FIles\nodejs\node_global&quot;
npm config set cache &quot;D:\Program FIles\nodejs\node_cache&quot;
</code></pre>
<p>（3） 检查是否生效<br>
    在键盘按下【win+R】键，输入cmd打开命令指示符界面，然后回车，打开cmd窗口，输入npm config list<br>
    你应该可以看到 输出的结果中有prefix = &quot;D:\Program FIles\nodejs\node_global&quot; 和cache = &quot;D:\Program FIles\nodejs\node_cache&quot;</p>
<h3 id="2环境变量的配置">2.环境变量的配置</h3>
<p>（1）设置环境变量<br>
    关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”，进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【D:\Program Files\nodejs\node_global\node_modules】，将【用户变量】下的【C:\Users**\AppData\Roaming\npm】修改为【D:\Program Files\nodejs\node_global】<br>
（2）测试<br>
    配置完后，安装个module测试下，我们就安装最常用的express模块，打开cmd窗口，输入如下命令进行模块的全局安装：</p>
<pre><code>npm install express -g # -g是全局安装的意思, 依赖包将会安装到nodejs/node_global下
</code></pre>
<h3 id="3淘宝镜像的配置">3.淘宝镜像的配置</h3>
<p>    npm安装插件过程：从<a href="http://registry.npmjs.org">http://registry.npmjs.org</a>下载对应的插件包（该网站服务器位于国外，所以经常下载缓慢或出现异常）<br>
阿里在国内搭建了镜像服务器:<a href="http://npm.taobao.org">http://npm.taobao.org </a><br>
需要执行以下命令更改:</p>
<pre><code>npm config set registry https://registry.npm.taobao.org --global
npm config set disturl https://npm.taobao.org/dist --global
</code></pre>
<p>更改完成<br>
使用以下命令查看本地镜像源</p>
<pre><code>npm config get registry
</code></pre>
<p>cnpm等同于npm命令，用法一样，cnpm下载模块会快一点。</p>
<h2 id="四-npm基本语法">四、npm基本语法</h2>
<p>npm -version  查看npm版本</p>
<p>npm install <name>  安装node.js的依赖包</p>
<p>npm install <name> @3.0.6 安装版本为3.0.6的依赖包</p>
<p>npm install <name> --save  安装的同时将信息写入package.json 中</p>
<p>npm install <name> -g  全局安装</p>
<p>npm init  会引导你创建一个package.json文件，包括名称，版本，作者等这些信息</p>
<p>npm remove express 移除express</p>
<p>npm update express 更新express</p>
<p>npm ls  列出当前安装的所有包</p>
<p>npm root  查看当前包的安装路径</p>
<p>npm root -g 查看全局包的安装路径</p>
<p>npm help  帮助</p>
<p>npm view express  dependencies  查看express 包的依赖关系</p>
<p>npm view express respository.url  查看express包的源文件地址</p>
<p>好了，这就是我整理的搭建Windows系统node环境，欢迎观看</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mybatis 逆向工程的学习]]></title>
        <id>https://junhaoyigu.github.io/post/mybatis-ni-xiang-gong-cheng-de-xue-xi/</id>
        <link href="https://junhaoyigu.github.io/post/mybatis-ni-xiang-gong-cheng-de-xue-xi/">
        </link>
        <updated>2020-06-12T00:44:36.000Z</updated>
        <summary type="html"><![CDATA[<p>😋如何自动生成实体类和dao层基础代码</p>
]]></summary>
        <content type="html"><![CDATA[<p>😋如何自动生成实体类和dao层基础代码</p>
<!-- more -->
<h2 id="一-mybatis-generator简介">一、mybatis generator简介</h2>
<p>    mybatis逆向工程也就是mybatis generator代码生成器，用这个工具通过配置数据库生成实体类和dao/mapper的接口和xml文件。</p>
<h2 id="二-环境搭建">二、环境搭建</h2>
<h3 id="1配置generator的两种方式">1.配置generator的两种方式</h3>
<p>    mybatis generator使用有两种方式，一种通过导入jar包的方式配置好generatorConfig.xml后去写逆向工程的java测试代码去调用generator，另一种是安装generator的插件。因为第二种相对简单适合初学者，我来介绍一下第二种。</p>
<h3 id="2安装generator插件">2.安装generator插件</h3>
<p>打开eclipse应用商店<br>
<img src="https://junhaoyigu.github.io/post-images/1591923819457.png" alt="" loading="lazy"><br>
搜索mybatis generator找到小黑鸟插件点击install，因为我是安装过所以显示的按钮是installed<br>
<img src="https://junhaoyigu.github.io/post-images/1591924017916.png" alt="" loading="lazy"><br>
安装过程很简单，我就不赘述了。</p>
<h2 id="三-配置generatorconfigxml">三、配置generatorConfig.xml</h2>
<p>安装完成后，创建一个项目，在src目录下new一个generatorConfig.xml<br>
<img src="https://junhaoyigu.github.io/post-images/1591924291009.png" alt="" loading="lazy"><br>
名字不用输入会自动生成，路径基本也不用输入，完成后点击finish<br>
<img src="https://junhaoyigu.github.io/post-images/1591924385800.png" alt="" loading="lazy"><br>
这里我省略了配置jar包或依赖的过程，因为要根据数据库生成实体类，所以 数据库连接jar包/依赖 必不可少。下面是文件内的配置</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;
&lt;generatorConfiguration&gt;
&lt;!-- 名字 生成类型MyBatis3Simple 实体类生成类型--&gt;
&lt;context id=&quot;context1&quot; targetRuntime=&quot;MyBatis3Simple&quot; defaultModelType=&quot;flat&quot;&gt;
&lt;!-- 注释 --&gt;
&lt;commentGenerator&gt;
	&lt;!-- 阻止所有的注释 --&gt;
	&lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;
&lt;/commentGenerator&gt;
&lt;!--数据库配置 数据库地址、驱动、密码、用户 --&gt;
&lt;jdbcConnection connectionURL=&quot;jdbc:mysql://localhost:3306/drink&quot; driverClass=&quot;com.mysql.jdbc.Driver&quot; password=&quot;123456&quot; userId=&quot;root&quot; /&gt;
&lt;!-- java实体类配置 包名、路径斜杠反写 --&gt;
&lt;javaModelGenerator targetPackage=&quot;com.mhys.tea.pojo&quot; targetProject=&quot;Tea\src&quot; /&gt;
&lt;!-- 映射xml文件配置 包名、路径斜杠反写 --&gt;
&lt;sqlMapGenerator targetPackage=&quot;com.mhys.tea.dao&quot; targetProject=&quot;Tea\src&quot; /&gt;
&lt;!-- 接口配置 包名、路径斜杠反写--&gt;
&lt;javaClientGenerator targetPackage=&quot;com.mhys.tea.dao&quot; targetProject=&quot;Tea\src&quot; type=&quot;XMLMAPPER&quot; /&gt;
&lt;!-- 数据表配置 生成哪些表，%代表这个数据库所有表的实体类和dao的生成 --&gt;
&lt;table tableName=&quot;%&quot;&gt;
	&lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;MySQL&quot;/&gt;
&lt;/table&gt;
&lt;/context&gt;
&lt;/generatorConfiguration&gt;
</code></pre>
<p>配置完后在当前这个文件右键run as就可以生成了<br>
<img src="https://junhaoyigu.github.io/post-images/1591924807545.png" alt="" loading="lazy"><br>
<code>注：Tea是我的项目名，自己用到时一定要修改成自己的项目名，其他的路径也要改成自己想要的路径！</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SSM框架的环境搭建]]></title>
        <id>https://junhaoyigu.github.io/post/ssm-kuang-jia-de-huan-jing-da-jian/</id>
        <link href="https://junhaoyigu.github.io/post/ssm-kuang-jia-de-huan-jing-da-jian/">
        </link>
        <updated>2020-06-04T06:51:18.000Z</updated>
        <summary type="html"><![CDATA[<p>😆如何用动态项目搭建ssm的环境</p>
]]></summary>
        <content type="html"><![CDATA[<p>😆如何用动态项目搭建ssm的环境</p>
<!-- more -->
<h2 id="一-ssm框架简介">一、SSM框架简介</h2>
<p>    SSM（Spring+SpringMVC+MyBatis）框架集由Spring、SpringMVC、MyBatis三个开源框架整合而成，常作为数据源较简单的web项目的框架。<br>
    其中spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。<br>
    SpringMVC分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。<br>
    MyBatis是一个支持普通SQL查询，存储过程和高级映射的优秀持久层框架。<br>
    页面发送请求给控制器，控制器调用业务层处理逻辑，逻辑层向持久层发送请求，持久层与数据库交互，后将结果返回给业务层，业务层将处理逻辑发送给控制器，控制器再调用视图展现数据。</p>
<h2 id="二-ssm框架的环境搭建">二、SSM框架的环境搭建。</h2>
<h3 id="1创建动态项目">1.创建动态项目</h3>
<p>    我们先创建一个动态项目，名字随意，我这里就起名“SSMDemo”。服务器我选择的是Tomcat8.5+jdk1.8.module version的版本我选择的是3.1，这套组合比较稳定。<br>
<img src="https://junhaoyigu.github.io/post-images/1591253916048.png" alt="" loading="lazy"><br>
然后一直next，之后有个创建web.xml的地方，打钩。<img src="https://junhaoyigu.github.io/post-images/1591254421833.png" alt="" loading="lazy"><br>
然后项目就创建完成了。如果忘记了最后那个打钩生成web.xml，可以选择手动生成，这个东西后面会用到。<img src="https://junhaoyigu.github.io/post-images/1591254599023.png" alt="" loading="lazy"><br>
然后我们就要开始配置SSM框架了，首先我们把jar包导进来。素材我会发到我的公众号“君豪说代码”中，回复“SSMjar包”领取<img src="https://junhaoyigu.github.io/post-images/1591254771567.png" alt="" loading="lazy"></p>
<h3 id="2配置webxml">2.配置web.xml</h3>
<p>代码如下：</p>
<!-- 配置spring容器 -->
<pre><code>&lt;context-param&gt;
	&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
	&lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt;
&lt;/context-param&gt;
&lt;!-- 配置监听器加载spring --&gt;
&lt;listener&gt;
&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;
&lt;!-- 前端控制器 --&gt;
&lt;servlet&gt;
	&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;
	&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
	&lt;init-param&gt;
		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
		&lt;param-value&gt;classpath:spring/spring-mvc.xml&lt;/param-value&gt;
	&lt;/init-param&gt;
	&lt;!-- 初始化当前servlet的开关 --&gt;
	&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
	&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;
	&lt;url-pattern&gt;*.do&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
&lt;!-- 解决中文乱码 --&gt;
&lt;filter&gt;
	&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;
	&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;
	&lt;init-param&gt;
		&lt;param-name&gt;encoding&lt;/param-name&gt;
		&lt;param-value&gt;utf-8&lt;/param-value&gt;
	&lt;/init-param&gt;
	&lt;init-param&gt;
		&lt;param-name&gt;forceEncoding&lt;/param-name&gt;
		&lt;param-value&gt;true&lt;/param-value&gt;
	&lt;/init-param&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
	&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;
	&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></pre>
<h3 id="3创建两个包">3.创建两个包</h3>
<p>然后在src下创建两个folder，一个是mybatis,一个是spring。</p>
<h3 id="4创建sqlmapconfigxml">4.创建SqlMapConfig.xml</h3>
<p>在mybatis包下创建SqlMapConfig.xml。代码如下：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot; &gt;
&lt;configuration&gt;
&lt;!-- 设置实体类的别名 --&gt;
&lt;typeAliases&gt;
&lt;package name=&quot;com.mhys.crm.pojo&quot;/&gt;
&lt;/typeAliases&gt;
&lt;/configuration&gt;
</code></pre>
<h3 id="5创建jdbcproperties">5.创建jdbc.properties</h3>
<p>在spring包下配置jdbc.properties数据库连接的配置，这里需要你改成你自己的数据库和密码</p>
<pre><code>jdbc.driver=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/crm?characterEncoding=utf-8
jdbc.username=root
jdbc.password=123456
</code></pre>
<h3 id="6创建applicationcontext-daoxml">6.创建applicationContext-dao.xml</h3>
<p>在spring包下配置applicationContext-dao.xml</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-4.2.xsd 
http://www.springframework.org/schema/mvc 
http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd &quot;&gt;
&lt;!-- 配置并读取properies文件 --&gt;
&lt;context:property-placeholder
	location=&quot;classpath:jdbc.properies&quot; /&gt;
&lt;!-- 配置数据源 --&gt;
&lt;bean id=&quot;dataSource&quot;
	class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;
	&lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driver}&quot;&gt;&lt;/property&gt;
	&lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;&gt;&lt;/property&gt;
	&lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;&gt;&lt;/property&gt;
	&lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!-- 配置SqlSessionFactory --&gt;
&lt;bean class=&quot;org.Mybatis.spring.SqlSessionFactoryBean&quot;&gt;
	&lt;!-- 设置mybatis核心配置文件 --&gt;
	&lt;property name=&quot;configLocation&quot;
		value=&quot;classpath:mybatis/SqlMapConfig.xml&quot;&gt;&lt;/property&gt;
	&lt;!-- 设置数据源 --&gt;
	&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!-- 配置Mapper扫描 --&gt;
&lt;bean class=&quot;ory.Mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;
	&lt;!-- 设置mapper扫描包 --&gt;
	&lt;property name=&quot;basePackage&quot; value=&quot;com.mhys.crm.dao&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<h3 id="7创建applicationcontext-servicexml">7.创建applicationContext-service.xml</h3>
<p>在spring包下配置applicationContext-service.xml</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-4.2.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-4.2.xsd 
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-4.2.xsd &quot;&gt;
&lt;!-- 配置service层扫描 --&gt;
&lt;context:component-scan base-package=&quot;com.mhys.crm.service&quot;&gt;&lt;/context:component-scan&gt;
&lt;!-- 配置事务管理器 --&gt;
&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
	&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!-- 开启注解方式管理aop事务 --&gt;
&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;
&lt;/beans&gt;
</code></pre>
<h3 id="8创建spring-mvcxml">8.创建spring-mvc.xml</h3>
<p>在spring包下配置spring-mvc.xml</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.2.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-4.2.xsd &quot;&gt;
&lt;!-- 配置Controller层扫描包 --&gt;
&lt;context:component-scan base-package=&quot;com.mhys.crm.controller&quot;&gt;&lt;/context:component-scan&gt;
&lt;!-- 配置注解驱动 --&gt;
&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;
&lt;!-- 配置视图解析器 --&gt;
&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
	&lt;property name=&quot;prefix&quot; value=&quot;/jsp/&quot;&gt;&lt;/property&gt;
	&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<p>至此SSM框架环境就搭建完成，可以写具体的业务逻辑了。<br>
<code>注：我写的包名和文件名在web.xml中都有配置，如需更改包名请连同web.xml配置一同修改！</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://junhaoyigu.github.io/post/hello-gridea/</id>
        <link href="https://junhaoyigu.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>